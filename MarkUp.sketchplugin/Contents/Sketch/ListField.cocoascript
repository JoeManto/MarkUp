@import 'lib/util.cocoascript'

function onRun(context) {
  var doc = context.document;
  var command = context.command;
  var page = [doc currentPage];
  var artboard = doc.currentPage().currentArtboard()

  //Makes alert box
  var alert = makeAlert();
  //Data on what you pressed in alert box and runs alert.
  var options = handleAlertResponse(alert, alert.runModal());
  var data;
  var textField;
  var isOrdered = false;

  function makeList(){
     var layer;
     var dot;
     var x = 100;
     var y = 100;
     weight = 15;
     for(var i = 0;i<=[data count]-1;i++){

       if(isOrdered){
        var str = ''+i;
        data[i] = [NSString stringWithFormat:@"%@.%@",str,data[i]];
        layer = layerUtil.makeTextLayer(data[i],weight,x,y,0);
       }else{
         layer = layerUtil.makeTextLayer(data[i],weight,x,y,0);
         dot = makeOpenDot(x-15,y+weight-8,weight-10);
         artboard.addLayers_([dot]);
       }
        artboard.addLayers_([layer]);
       y+=(weight+30);
     }
     //doc.currentView().centerRect_(group.rect())
  }

  function makeOpenDot(x,y,weight){
      var ovalShape = MSOvalShape.alloc().init();
      ovalShape.frame = MSRect.rectWithRect(NSMakeRect(x,y,weight,weight));
      var shapeGroup=MSShapeGroup.shapeWithPath(ovalShape);
      shapeGroup.style().addStylePartOfType(1);
      shapeGroup.isBorderEnabled = true;
      var fill = shapeGroup.style().borders().firstObject();
      fill.color = MSColor.colorWithRed_green_blue_alpha(0/255,0/255,0/255,1.0)

     return shapeGroup;
  }

  function makeDot(x,y,weight){
      var ovalShape = MSOvalShape.alloc().init();
      ovalShape.frame = MSRect.rectWithRect(NSMakeRect(x,y,weight,weight));
      var shapeGroup=MSShapeGroup.shapeWithPath(ovalShape);
      shapeGroup.style().addStylePartOfType(0);
      var fill = shapeGroup.style().fills().firstObject();
      fill.color = MSColor.colorWithRed_green_blue_alpha(0/255,0/255,0/255,1.0)

     return shapeGroup;
  }





  /*********************************alert

  /**
  * Made a new COSAlertWindow and set properties.
  * @param -
  * @param -
  * @return {COSAlertWindow} alert
  */
  function makeAlert(){
    var alert = COSAlertWindow.new();
    alert.setMessageText('GitHub ListField');
    alert.addAccessoryView(createDataEntryField());
    alert.addButtonWithTitle('Make');
    alert.addButtonWithTitle('Cancel');
    var resetButton = alert.addButtonWithTitle('reset');
    [resetButton setCOSJSTargetFunction:function(){
      resetData();
    }];
    return alert;
  }

  /**
  * Used for global var options. handles the data in makeAlert()
  * Data like Was "export hit" or "Cancel"
  * @param - {COSAlertWindow} alert
  * @param - {string} code
  * @return {-} -
  * @return {null} basicly if 'cancel is pressed' options becomes null that this point
  */
  function handleAlertResponse(alert, code) {
  if (code == "1000") {
    updateDataEntryField(textField);
    if(data != nil){
        //doc.displayMessage(data[0]);
        makeList();
    }else{
    doc.displayMessage('No list data found');
    }
  }
  if(code == "1001"){
    resetData();
  }
  return null;
  }


  function createDataEntryField(){

    var view = [[NSView alloc]initWithFrame:CGRectMake(0, 0, 400,100)];
    textField = [[NSTextField alloc]initWithFrame:CGRectMake(0, 30, 250, 20)];

    [[textField cell] setPlaceholderString:@"type data entry"];
    [textField setBezeled:true];
    [textField setSelectable:true];

    var addData = [[NSButton alloc]initWithFrame:CGRectMake(260,19,40,40)];
    [addData setTitle: @"+"];
    [addData setButtonType:NSMomentaryLightButton];
    [addData setBezelStyle:NSRoundedBezelStyle];
    [addData setCOSJSTargetFunction:function(){
        updateDataEntryField(textField);
    }];

    var type = [[NSButton alloc]initWithFrame:CGRectMake(0,73,100,40)];
    [type setTitle: @"Ordered List?"];
    [type setButtonType:NSSwitchButton]
    [type setBezelStyle:NSRoundedBezelStyle];
    [type setCOSJSTargetFunction:function(){
        markOrdered(type);
    }];
    [view addSubview:type];
    [view addSubview:textField];
    [view addSubview:addData];

    return view;
  }

  function resetData(){
    [textField setStringValue:@""];
    [[textField cell] setPlaceholderString:@"~All data has been reset"];
    data = [[NSMutableArray alloc]init];
  }

  function updateDataEntryField(textField){

    if(stringUtil.isFieldFilled([textField stringValue])){
         if(data == null){
            data = [[NSMutableArray alloc]init];
    }
        [[textField cell] setPlaceholderString:@"type data entry"];
        [data addObject:[textField stringValue]];
        [textField setStringValue:@""];
    }
  }


  function markOrdered(button){
    if ([button state] == NSOnState) {
        isOrdered = true;
    }else{
        isOrdered = false;
    }
  }

}
